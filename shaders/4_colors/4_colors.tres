[gd_resource type="CanvasItemMaterial" load_steps=2 format=1]

[sub_resource type="CanvasItemShader" id=1]

_code = {
"fragment": "// Colors that we will use
uniform color color_1 = vec4(0.784313725, 0.788235294, 0.262745098,1);
uniform color color_2 = vec4(0.490196078, 0.521568627, 0.152941176, 1);
uniform color color_3 = vec4(0, 0.415686275, 0, 1);
uniform color color_4 = vec4(0.015686275, 0.243137255, 0, 1);

// Color offset - changes threshold for color adjustments
uniform float offset = 0.5;

// Get pixel color from screen
color pixel_color = vec4(texscreen(SCREEN_UV), 1);

// Function to covert a pixel color into grayscale
vec4 to_grayscale(vec4 pixcol)
{
	float average = (pixcol.r + pixcol.g + pixcol.b) / 3;
	return vec4(average, average, average, 1);
}

// Colorizes the grayscale pixel
vec4 colorize(vec4 grayscale)
{
	// The color we will return
	color new_color;
	
	// Color greater than 0 in value?
	if(grayscale.r >= 0)
	{
		// Set darkest color 4
		new_color = color_4;
				
		// Color greater than (default) 0.25 in value? 
		if(grayscale.r > offset * 0.5)
		{
			// Set dark color 3
			new_color = color_3;
			
			// Color greater than (default) 0.50 in value? 
			if(grayscale.r > offset)
			{
				// Set bright color 2
				new_color = color_2;
				
				// Color greater than (default) 0.75 in value? 
				if(grayscale.r > offset * 1.5)
				{
					// Set brightest color 1
					new_color = color_1;
				}
			}
		}
	}
	
	// Return the new color
	return new_color;
}

// Set the pixel color we are going to use
COLOR = colorize(to_grayscale(pixel_color));",
"fragment_ofs": 0,
"light": "",
"light_ofs": 0,
"vertex": "",
"vertex_ofs": 0
}

[resource]

shader/shader = SubResource( 1 )
shader/shading_mode = 0
shader_param/color_1 = Color( 0.784314, 0.788235, 0.262745, 1 )
shader_param/color_2 = Color( 0.490196, 0.521569, 0.152941, 1 )
shader_param/color_3 = Color( 0, 0.415686, 0, 1 )
shader_param/color_4 = Color( 0.0156863, 0.243137, 0, 1 )
shader_param/offset = 0.5

